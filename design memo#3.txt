For an undo and redo problem a stack is a great choice as it is efficient at storing all the imputed data in the order that it was submitted. Having the data organized like that is incredibly important as it ensures that the undo feature will accurately undo the last task and not undo the wrong thing, it also helps ensure that when using redo it will redo something that was possibly just undone. 
  For a help desk type role a queue is the better choice as it sets up a system of first in is the first in line. This system also helps ensure that in a real world application customers do not feel that other customers are getting preferential treatment. Using a queue for a help desk role is also incredibly efficient as it will add names to the back of the line while also removing whatever or whoever is at the front of the line when told to without forcing the person to seek out the specific name in the list. 
In my code my implementations differ from pythons built in lists in many different ways. First up is on what they are designed for python lists are normally used when there is a definite set amount of data while mine is designed for an ever growing and shrinking amount. How this data is laid out in the memory is also different while a typical list resizes and copies itself into a bigger block once it goes past initial capacity the linked list i am using grows one node and a time making it work faster and more efficiently at larger sizes.